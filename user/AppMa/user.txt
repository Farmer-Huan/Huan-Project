# private folder
# Commit & Check push 02

# - pageRegist - 

# ID
# PASSWORD
# PASSWORD again
# E-mail

# inputed data > variable
# variable > DB Query

# 1. Manager
# 2. Clients

# 1. Manager
#  1) 전체 Clients 확인 가능
#  2) Clients 삭제 가능 (?)

# 2. Client
#  1) 본인 정보 수정 및 추가 정보 기입가능
#   - 추가 정보(이름, 전화번호, 주소)
#  2) 회원 탈퇴 가능


# 파일 경로
# Java Resources
# src/com.farmer.huan/


# Get 방식과 Post 방식 차이

# 글자 수 제한 O     		   | 글자 수 제한X
# 보안    취약       	 	   | 보안 괜찮
# URL 그 자체를 즐겨찾기 등록 가능 | submit 결과를 서버 전송 DB 저장



# Get 방식의 데이터 전송 방식:: Form 태그 & 주소창 & 링크 

# form에 Post 사용하는 이유
# 1. 용량
#  - Get 방식은 URL 뒤에 데이터가 쿼리스트링으로 첨부 되기때문에 길이의 제한이 있다.
#  - 게시판의 내용에 글을 쓸 때 데이터가 많아서 Get 방식으로는 한계가 있다.

# 2. 인코딩
#  - Get 방식은 띄어쓰기가 포함된 문자열이나 특수문자를 넘길 때에 인코딩 필요
#  - Post 방식은 인코딩 필요 없다.

# 3. 보안상 문제 
#  - Get 방식으로 ID & Password를 넘길 때에 URL이 보이기 때문에 보안상 문제점이 있다.


# DB 관련
# 오라클 계정 생성
# cmd에 들어가서 
# sqlplus "/as sysdba"
# create user 만들 아이디 identified by 패스워드;
#  - 권한 부여하기 
# grant resource, connect, dba to 만든아이디;


# 작업 tablespace 지정 : alter user 아이디 default tablesapce users;
# 임시 tablespace 지정 : alter user 아이디 temporary tablespace temp;

로그인 & 회원가입 > 회원정보수정 > 회원정보삭제 

 ** 개발 알고리즘 **

# 1. 메인 페이지
# 1.1 타이틀 프레임
# 1.2 버튼 페이지
# 1.3 게시판리스트


-------------------------------------------------------------------------------------------
< Main Page >

------------------------+------------------------------------------------------------------
< Menu list >		| < Contents >
 - 메인 화면		| Farmer Huan Coffee Manage Page
 - 로그인		|
 - 회원가입		|
 			|
			|
			|
			|
			|
			|
			|
			|
------------------------+------------------------------------------------------------------
< footer >

								    CopyRight 2016 By AppMa
-------------------------------------------------------------------------------------------


# 2. 회원 가입페이지
# 2.1 회원가입 정보

# 2.1.1 아이디
# 2.1.2 아이디 중복 체크
 - db 중복 체크 하는 javasctipt

# 2.2.1 비밀번호
# 2.2.2 비밀번호 확인 체크

# 2.3.1 이메일
# 2.3.2 이메일 중복 체크
 - db 중복 체크 하는 javasctipt

# 2.4.1 성별
 - radio

# 2.5.1 핸드폰
 - option

-------------------------------------------------------------------------------------------
< Regist Page >

------------------------+------------------------------------------------------------------
< Menu list >		| < Contents >
 - 기존 아이디로 로그인	| - 아이디
 (로그인 페이지)	| - 비밀번호
			| - 비밀번호 확인
  			| - 이메일
			| - 이메일 확인
			| - 성별 (남/여)
			| - 핸드폰
			|
			|
			|
			|
------------------------+------------------------------------------------------------------
< footer >

								    CopyRight 2016 By AppMa
-------------------------------------------------------------------------------------------


# 3 회원 관리
# 3.1 회원 관리 페이지 - 관리자
# 3.1.1 관리자의 회원관리
# 3.1.2 회원목록 확인
# 3.1.3 회원 강퇴

-------------------------------------------------------------------------------------------
< Admin Member Manage >

------------------------+------------------------------------------------------------------
< Menu list >		| < Contents >
 - 회원 목록		| - 회원 목록 나열
 - 회원 강퇴		|
			|
  			|
			|
			|
			|
------------------------+------------------------------------------------------------------
< footer >

								    CopyRight 2016 By AppMa
-------------------------------------------------------------------------------------------


# 3.2 일반회원의 회원관리
 - 로그인한 사람의 수정 페이지

# 3.2.1 회원 수정
 - 아이디 X
 - 비밀번호, 전화번호, 이메일 수정

# 3.2.2 회원 탈퇴
 - DB 데이터 삭제 신청 > 관리자에서 삭제 ?

-------------------------------------------------------------------------------------------
< Public Member Manage >

------------------------+------------------------------------------------------------------
< Menu list >		| < Contents >
 - 회원 수정		| - 비밀번호
 - 회원 탈퇴		| - 비밀번호 확인
  			| 
			|
			|
			|
			|
------------------------+------------------------------------------------------------------
< footer >

								    CopyRight 2016 By AppMa
------------------------------------------------------------------------------------------- 
			
prepare statement / statement
--------------------------------------------------
 *** PreparedStatement
String sql = "select * from [테이블] where id = ?";
try {
	Connection conn = getConnection();

	PreparedStatement pstmt = conn.prepareStatement(sql);
	pstmt.setString(1, [아이디]);
	pstmt.executeQuery();
} catch (SQLException sqle) {
	sqle.printStackTrace();
}
---------------------------------------------------
 *** Statement
try {
	Connection conn = getConnection();
	Statement stmt = conn.createStatement();
	ResultSet rs = stmt.executeQuery(sql);
} catch (SQLException sqle) {
	sqle.printStackTrace();
}

---------------------------------------------------
Statement는 자신의 객체를 생성하면서 쿼리문을 전달할 수 없습니다.
Statement의 executeQuery메소드나 executeUpdate메소드로 sql문을 실행할 수 있습니다.
Statement를 이용한 메소드 중에서 쿼리문의 인자를 전달할 수 있는 메소드가 없다.

ex) select * from [테이블] where id = ? 와 같은 sql 문에서 ?에 해당하는 인자를 전달할 수 없다는 것이다.
무조건 sql문에 id에 해당하는 인자값을 적어줘야 한다.

반면에 PreparedStatement객체는 Connection 객체의 prepareStatement메소드를 통해서 sql문을 전달 할 수 있다.\
또한 ?에 해당하는 인자를 setString이나 setInt... 등 여러메소드들을 통해 인자값을 설정해 줄 수 있다.

// http://egloos.zum.com/tsquare0/v/2740990

확인 알고리즘